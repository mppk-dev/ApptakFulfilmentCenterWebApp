@page "/"
@using System.Security.Cryptography
@using System.Text
@using System.Text.RegularExpressions;
@using ApptakFulfilmentCenterWebApp.Components.Layout
@layout ApptakFulfilmentCenterWebApp.Components.Layout.Auth
@inject IJSRuntime JS
@inject ProtectedSessionStorage sessionStorage

<div class="hold-transition login-page">
    <div class="login-box">
        <!-- /.login-logo -->
        <div class="card card-outline card-primary">
            <div class="card-header text-center">
                <img src="Assets/images/AppTaklogo.png" alt="AppTak Logo" class="img-fluid" style="max-height: 150px;" />
            </div>
            <div class="card-body">
                <p class="login-box-msg">Sign in to start your session</p>

                <EditForm Model="@taUsersAdmin" OnValidSubmit="HandleLogin" FormName="LoginForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-group mb-3">
                        <input type="email" class="form-control" @bind-value="taUsersAdmin.Email" placeholder="Email">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-envelope"></span>
                            </div>
                        </div>
                    </div>
                    <div class="input-group mb-3">
                        <input type="password" class="form-control" @bind-value="taUsersAdmin.Password" placeholder="Password">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-lock"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-8">
                            <div class="icheck-primary" style="display: none;">
                                <input type="checkbox" id="remember">
                                <label for="remember">
                                    Remember Me
                                </label>
                            </div>
                        </div>
                        <!-- /.col -->
                        <div class="col-4">
                            <button type="submit" class="btn btn-primary btn-block">Sign In</button>
                        </div>
                        <!-- /.col -->
                    </div>
                </EditForm>

                <!-- Loader Overlay -->
                @if (isLoading)
                {
                    <div class="overlay-loader">
                        <LogoLoader />
                    </div>
                }

                @* @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                } *@

                <p class="mb-1">
                    <a href="forgotpassword">I forgot my password</a>
                </p>
                <p class="mb-0">
                    <a href="signup" class="text-center">Register a new membership</a>
                </p>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
</div>

@code {
    private TaUsersAdmin taUsersAdmin = new();
    private string errorMessage;
    private bool showToast;
    private string toastType, toastMessage, toastTitle;
    private bool isLoading = false;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await ShowToastr("info", "Page Loaded Successfully", "Info");
    //     }
    // }

    private async Task ShowToastr(string type, string message, string title = "")
    {
        await JS.InvokeVoidAsync("showToastr", type, message, title);
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        try
        {
            Console.WriteLine("HandleLogin called");
            if (string.IsNullOrWhiteSpace(taUsersAdmin.Email))
            {
                await ShowToastr("error", "Email is required", "Login Failed");
                return;
            }
            if (string.IsNullOrWhiteSpace(taUsersAdmin.Password))
            {
                await ShowToastr("error", "Password is required", "Login Failed");
                return;
            }

            string UserPasswordKey = UserPassKey(taUsersAdmin.Email);
            string UserHashPass = Encrypt_admin(UserPasswordKey, taUsersAdmin.Password);

            var user = await _context.TaUsersAdmins
                                     .FirstOrDefaultAsync(u => u.Email == taUsersAdmin.Email && u.Password == UserHashPass);

            if (user != null)
            {
                await sessionStorage.SetAsync("UserName", $"{user.FirstName} {user.LastName}"); // Adjust property as needed
                // Successful login (Redirect or set session/token)
                Navigation.NavigateTo("/home");
            }
            else
            {
                await ShowToastr("warning", "Invalid username or password.", "Login Failed");
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.Error.WriteLine($"[InvalidOperationException] {ex.Message}");
            await ShowToastr("error", "A system error occurred. Please try again later.", "Error");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[Exception] {ex.Message}");
            await ShowToastr("error", "Something went wrong. Please try again.", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    public string Encrypt_admin(string sKey, string sPainText)
    {
        // string sKey = Session["sUser_Code"].ToString();
        //string sKey = "920000050277";
        sKey = "920000050277";
        if (sPainText.Length == 0)
            return (sPainText);
        return (EncryptString(sPainText, sKey));
    }

    public string EncryptString(string InputText, string Password)
    {
        // "Password" string variable is nothing but the key(your secret key) value which is sent from the front end.
        // "InputText" string variable is the actual password sent from the login page.
        // We are now going to create an instance of the
        // Rihndael class.
        RijndaelManaged RijndaelCipher = new RijndaelManaged();
        // First we need to turn the input strings into a byte array.
        byte[] PlainText = System.Text.Encoding.Unicode.GetBytes(InputText);
        // We are using Salt to make it harder to guess our key
        // using a dictionary attack.
        byte[] Salt = Encoding.ASCII.GetBytes(Password.Length.ToString());
        // The (Secret Key) will be generated from the specified
        // password and Salt.
        //PasswordDeriveBytes -- It Derives a key from a password
        PasswordDeriveBytes SecretKey = new PasswordDeriveBytes(Password, Salt);
        // Create a encryptor from the existing SecretKey bytes.
        // We use 32 bytes for the secret key
        // (the default Rijndael key length is 256 bit = 32 bytes) and
        // then 16 bytes for the IV (initialization vector),
        // (the default Rijndael IV length is 128 bit = 16 bytes)
        ICryptoTransform Encryptor = RijndaelCipher.CreateEncryptor(SecretKey.GetBytes(16), SecretKey.GetBytes(16));
        // Create a MemoryStream that is going to hold the encrypted bytes
        MemoryStream memoryStream = new MemoryStream();
        // Create a CryptoStream through which we are going to be processing our data.
        // CryptoStreamMode.Write means that we are going to be writing data
        // to the stream and the output will be written in the MemoryStream
        // we have provided. (always use write mode for encryption)
        CryptoStream cryptoStream = new CryptoStream(memoryStream, Encryptor, CryptoStreamMode.Write);
        // Start the encryption process.
        cryptoStream.Write(PlainText, 0, PlainText.Length);
        // Finish encrypting.
        cryptoStream.FlushFinalBlock();
        // Convert our encrypted data from a memoryStream into a byte array.
        byte[] CipherBytes = memoryStream.ToArray();
        // Close both streams.
        memoryStream.Close();
        cryptoStream.Close();
        // Convert encrypted data into a base64-encoded string.
        // A common mistake would be to use an Encoding class for that.
        // It does not work, because not all byte values can be
        // represented by characters. We are going to be using Base64 encoding
        // That is designed exactly for what we are trying to do.
        string EncryptedData = Convert.ToBase64String(CipherBytes);
        // Return encrypted string.
        return EncryptedData;
    }

    public string UserPassKey(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
            return string.Empty;

        var usernamePart = email.Split('@')[0];

        // Remove all non-alphanumeric characters
        var cleanedUsername = Regex.Replace(usernamePart, "[^a-zA-Z0-9]", "");

        return cleanedUsername;
    }
}
