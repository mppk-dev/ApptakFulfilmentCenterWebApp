@page "/"
@inject IJSRuntime JS
@inject ProtectedSessionStorage sessionStorage
@using System.Text.RegularExpressions;
@using System.Security.Cryptography
@using System.Text
@layout Layout.Auth
@inject IAuthService authService

<PageTitle>login</PageTitle>
<style>
    .card-auth-page {
        align-items: center;
        display: flex;
        flex-direction: column;
        height: 100vh;
        justify-content: center;
        background: linear-gradient(#f68c55, #3f7fc4);
    }

    .main-card {
        border-top: 3px solid #007bff;
        width: 25rem;
    }

    .card-auth-img {
        max-height: 135px;
        margin: 10px;
    }
</style>
<div class="card-auth-page">
    <Card Class="main-card">
        <CardHeader>
            <div class="text-center">
                <img class="rounded-top card-auth-img" src="Assets/images/AppTaklogo.png" alt="placeholder" />
            </div>
        </CardHeader>

        <CardBody>
            <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
                <DataAnnotationsValidator />

                <div class="form-group row mb-3">
                    <div class="col-md-12">
                        <TextInput @bind-Value="@userLogin.Email" Placeholder="Email" />
                        <ValidationMessage For="@(() => userLogin.Email)" />
                    </div>
                </div>

                <div class="form-group row mb-3">
                    <div class="col-md-12">
                        <PasswordInput @bind-Value="@userLogin.Password" Placeholder="Password" />
                        <ValidationMessage For="@(() => userLogin.Password)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12 text-right">
                        <Button Type="ButtonType.Submit" @ref="saveButton" Color="ButtonColor.Primary" Class="float-end" style="width: inherit;">Sign In</Button>
                        <CardLink To="#" class="text-decoration-none">Forget Password?</CardLink>
                    </div>
                </div>
            </EditForm>
        </CardBody>

        <CardFooter>
            <div class="row justify-content-center">
                <div class="col-md-12 text-center" style="margin-top: 0.5rem;">
                    <h6>
                        New User?
                        <CardLink To="/signup" class="fw-bold text-decoration-none">Signup here!</CardLink>
                    </h6>
                </div>
            </div>
        </CardFooter>
    </Card>
</div>


@code {
    [Inject] protected ToastService ToastService { get; set; }
    private LoginDto userLogin = new();
    private EditContext? editContext;
    private Button saveButton;

    protected override void OnInitialized()
    {
        editContext = new EditContext(userLogin);
        base.OnInitialized();
    }

    public async Task HandleOnValidSubmit()
    {
        if (editContext.Validate())
        {
            saveButton?.ShowLoading("Signing in...");

            var user = await authService.AuthenticateUserAsync(userLogin.Email, userLogin.Password);
            // string userKey = UserPassKey(userLogin.Email);
            // string encryptedPassword = Encrypt_admin(userKey, userLogin.Password);

            // var user = await _context.TaUsersAdmins
            //                      .FirstOrDefaultAsync(u => u.Email == userLogin.Email && u.Password == encryptedPassword);

            if (!string.IsNullOrEmpty(user.UserCode.ToString()))
            {
                await sessionStorage.SetAsync("UserName", $"{user.FirstName} {user.LastName}"); // Adjust property as needed
                Navigation.NavigateTo("/index");
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, $"Invalid username or password."));
                saveButton?.HideLoading();
            }

            // Console.WriteLine("Login successful");
            // ToastService.Notify(new(ToastType.Success, $"Form is working..."));

            // await Task.Delay(6000); // API call

            // saveButton?.HideLoading();

            //Navigation.NavigateTo("/index");
        }
    }

    private void ResetForm()
    {
        userLogin = new();
        editContext = new EditContext(userLogin);
    }

    private string Encrypt_admin(string sKey, string sPainText)
    {
        // string sKey = Session["sUser_Code"].ToString();
        //string sKey = "920000050277";
        // sKey = "920000050277";
        //sKey = "920000057860";
        if (sPainText.Length == 0)
            return (sPainText);
        return (EncryptString(sPainText, sKey));
    }

    private string EncryptString(string InputText, string Password)
    {
        // "Password" string variable is nothing but the key(your secret key) value which is sent from the front end.
        // "InputText" string variable is the actual password sent from the login page.
        // We are now going to create an instance of the
        // Rihndael class.
        RijndaelManaged RijndaelCipher = new RijndaelManaged();
        // First we need to turn the input strings into a byte array.
        byte[] PlainText = System.Text.Encoding.Unicode.GetBytes(InputText);
        // We are using Salt to make it harder to guess our key
        // using a dictionary attack.
        byte[] Salt = Encoding.ASCII.GetBytes(Password.Length.ToString());
        // The (Secret Key) will be generated from the specified
        // password and Salt.
        //PasswordDeriveBytes -- It Derives a key from a password
        PasswordDeriveBytes SecretKey = new PasswordDeriveBytes(Password, Salt);
        // Create a encryptor from the existing SecretKey bytes.
        // We use 32 bytes for the secret key
        // (the default Rijndael key length is 256 bit = 32 bytes) and
        // then 16 bytes for the IV (initialization vector),
        // (the default Rijndael IV length is 128 bit = 16 bytes)
        ICryptoTransform Encryptor = RijndaelCipher.CreateEncryptor(SecretKey.GetBytes(16), SecretKey.GetBytes(16));
        // Create a MemoryStream that is going to hold the encrypted bytes
        MemoryStream memoryStream = new MemoryStream();
        // Create a CryptoStream through which we are going to be processing our data.
        // CryptoStreamMode.Write means that we are going to be writing data
        // to the stream and the output will be written in the MemoryStream
        // we have provided. (always use write mode for encryption)
        CryptoStream cryptoStream = new CryptoStream(memoryStream, Encryptor, CryptoStreamMode.Write);
        // Start the encryption process.
        cryptoStream.Write(PlainText, 0, PlainText.Length);
        // Finish encrypting.
        cryptoStream.FlushFinalBlock();
        // Convert our encrypted data from a memoryStream into a byte array.
        byte[] CipherBytes = memoryStream.ToArray();
        // Close both streams.
        memoryStream.Close();
        cryptoStream.Close();
        // Convert encrypted data into a base64-encoded string.
        // A common mistake would be to use an Encoding class for that.
        // It does not work, because not all byte values can be
        // represented by characters. We are going to be using Base64 encoding
        // That is designed exactly for what we are trying to do.
        string EncryptedData = Convert.ToBase64String(CipherBytes);
        // Return encrypted string.
        return EncryptedData;
    }

    private string UserPassKey(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
            return string.Empty;

        var usernamePart = email.Split('@')[0];

        // Remove all non-alphanumeric characters
        var cleanedUsername = Regex.Replace(usernamePart, "[^a-zA-Z0-9]", "");

        return cleanedUsername;
    }
}